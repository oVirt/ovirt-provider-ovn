---
- name: gather facts from controller container
  delegate_to: "{{ controller_container_id }}"
  setup:

- name: detect OS version
  delegate_to: "{{ controller_container_id }}"
  set_fact:
    os_major_version: "{{ ansible_distribution_major_version }}"

- name: delete all routers
  openstack.cloud.router:
    cloud: "{{ cloud_name }}"
    name: "{{ item.name }}"
    state: absent
  with_items:
  - "{{ routers | default([]) }}"

- name: reset the ovs network, deleting all ports connected to it
  delegate_to: "{{ controller_container_id }}"
  openvswitch.openvswitch.openvswitch_bridge:
    bridge: br-int
    state: absent
  when: enable_data_plane_reset

- name: delete all ports
  openstack.cloud.port:
    cloud: "{{ cloud_name }}"
    name: "{{ item.name }}"
    state: absent
  with_items:
    - "{{ network_points }}"

- name: read current ports from provider ...
  openstack.cloud.port_info:
    cloud: "{{ cloud_name }}"
  register: result

- fail:
    msg: 'ports were not deleted'
  when: result.ports | length > 0
 
- name: delete all subnets
  openstack.cloud.subnet:
    cloud: "{{ cloud_name }}"
    name: "{{ item.subnet_name }}"
    state: absent
  with_items:
  - "{{ network_points }}"

- name: read current subnets from provider ...
  openstack.cloud.subnets_info:
    cloud: "{{ cloud_name }}"
  register: result

- fail:
    msg: 'Subnets were not deleted'
  when: result.subnets | length > 0

- name: delete all networks
  openstack.cloud.network:
    cloud: "{{ cloud_name }}"
    name: "{{ item.network }}"
    state: absent
  with_items:
    - "{{ network_points }}"

- name: read current networks from provider ...
  openstack.cloud.networks_info:
    cloud: "{{ cloud_name }}"
  register: result

- fail:
    msg: 'Networks were not deleted'
  when: result.networks | length > 0

- name: delete the dhcp leases
  delegate_to: "{{ controller_container_id }}"
  file:
    path: "{{ dhcp_lease_directory[os_major_version] }}/{{ item.ns }}.lease"
    state: absent
  with_items:
    - "{{ network_points }}"

- name: disable namespace dynamic ipv6 configuration through RAs
  delegate_to: "{{ controller_container_id }}"
  command:
    "ip netns exec {{ item[0].ns }} echo 0 > /proc/sys/net/ipv6/conf/{{ item[0].name }}/{{ item[1] }}"
  when:
    - "'ip' not in item[0]"
    - "'ipv6_address_mode' in item[0]"
    - item[0].cidr is ansible.utils.ipv6 
    - item[0].ipv6_address_mode == 'dhcpv6-stateless'
  with_nested:
    - "{{ network_points }}"
    - [ 'autoconf', 'accept_ra', 'accept_redirects' ,'accept_ra_pinfo' ]

- name: stop tcpdump captures
  include_tasks: stop_tcpdump_debug.yml
  when:
    - debug_icmpv6
