---
- name: gather facts from controller container
  delegate_to: "{{ controller_container_id }}"
  setup:

- name: detect OS version
  delegate_to: "{{ controller_container_id }}"
  set_fact:
    os_major_version: "{{ ansible_facts['distribution_major_version'] }}"

- name: install DHCP client for DHCP client functionality
  delegate_to: "{{ controller_container_id }}"
  package:
    name: "{{ dhcp_package_name[os_major_version] }}"
    state: present

- name: create DHCP lease directory
  delegate_to: "{{ controller_container_id }}"
  file:
    path: "{{ dhcp_lease_directory[os_major_version] }}"
    state: directory
    mode: '0755'

- name: create the ip namespaces
  delegate_to: "{{ controller_container_id }}"
  community.general.ip_netns:
    name: "{{ item.ns }}"
    state: present
  with_items:
    - "{{ network_points }}"

- name: create ports
  delegate_to: "{{ controller_container_id }}"
  command:
    ovs-vsctl add-port br-int "{{ item.port.name }}" -- set Interface "{{ item.port.name }}" type=internal external_ids:iface-id="{{ item.port.id }}"
  when:
    - item.port.name != "router_port"
  with_items:
    - "{{ created_ports.results }}"

- name: attach the ports to the namespaces
  delegate_to: "{{ controller_container_id }}"
  command:
    ip link set "{{ item.name }}" netns "{{ item.ns }}"
  with_items:
    - "{{ network_points }}"

- name: debug filters
  include_tasks: start_tcpdump_debug.yml
  when:
  - debug_icmpv6

- name: set MAC address on the ports
  delegate_to: "{{ controller_container_id }}"
  command:
    "ip netns exec {{ item.0.ns }} ip link set {{ item.0.name }} address {{ item.1.port.mac_address }}"
  with_together:
    - "{{ network_points }}"
    - "{{ created_ports.results }}"

- name: activate the interfaces
  delegate_to: "{{ controller_container_id }}"
  command:
    ip netns exec "{{ item.ns }}" ip link set "{{ item.name }}" up
  with_items:
    - "{{ network_points }}"

- name: set static ip addresses on the ports
  delegate_to: "{{ controller_container_id }}"
  command:
    ip netns exec "{{ item.ns }}" ip addr add "{{ item.ip }}"/"{{ item.cidr.split('/')[1] }}" dev "{{ item.name }}"
  when:
    - item.ip is defined
  with_items:
    - "{{ network_points }}"

- name: namespace dynamic ipv4 configuration
  delegate_to: "{{ controller_container_id }}"
  command: "{{ dhcp_ipv4_command[os_major_version] }}"
  with_items:
    - "{{ network_points }}"
  when:
    - "'ip' not in item"
    - item.cidr | ipv4

- name: namespace dynamic ipv6 configuration through dhcpv6
  delegate_to: "{{ controller_container_id }}"
  command: "{{ dhcp_ipv6_command[os_major_version] }}"
  when:
    - "'ip' not in item"
    - item.cidr | ipv6
    - "'ipv6_address_mode' not in item or item.ipv6_address_mode == 'dhcpv6-stateful'"
  with_items:
  - "{{ network_points }}"

- name: namespace dynamic ipv6 configuration through RAs
  delegate_to: "{{ controller_container_id }}"
  command:
    "ip netns exec {{ item[0].ns }} echo 1 > /proc/sys/net/ipv6/conf/{{ item[0].name }}/{{ item[1] }}"
  when:
    - "'ip' not in item[0]"
    - "'ipv6_address_mode' in item[0]"
    - item[0].cidr | ipv6
    - item[0].ipv6_address_mode == 'dhcpv6-stateless'
  with_nested:
    - "{{ network_points }}"
    - [ 'autoconf', 'accept_ra', 'accept_redirects' ,'accept_ra_pinfo' ]
